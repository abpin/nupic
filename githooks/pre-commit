#!/usr/bin/env python
# ----------------------------------------------------------------------
# Copyright (C) 2012, Numenta Inc. All rights reserved.
#
# The information and source code contained herein is the
# exclusive property of Numenta Inc.  No part of this software
# may be used, reproduced, stored or distributed in any form,
# without explicit written authorization from Numenta Inc.
# ----------------------------------------------------------------------

"""Git pre-commit hook.

Currently does the following checks:
  * Runs unit tests.
  * Checks for pylint errors.
"""

import os
import subprocess
import sys


def runTests(rootDir):
  try:
    subprocess.check_call([os.path.join(rootDir, 'run_tests.sh')])
  except subprocess.CalledProcessError:
    print ('Please fix unit tests before committing.  If this is in '
           'error, you can override with "git commit --no-verify ...".')
    sys.exit(1)


def checkLint():
  # Get a list of non-deleted Python files modified since last commit.
  sub = subprocess.Popen('git diff --staged --name-only HEAD'.split(),
                         stdout=subprocess.PIPE)
  sub.wait()
  py_files_changed = [file for file in [f.strip() for f in
                                        sub.stdout.readlines()]
                      if (file.endswith('.py') and os.path.exists(file)) or
                          is_py_script(file)]

  for file in py_files_changed:
    try:
      subprocess.check_call(['pylint', '--errors-only', file])
    except subprocess.CalledProcessError:
      print ('Please fix pylint errors before committing.  If this is in '
             'error, you can override with "git commit --no-verify ...".')
      sys.exit(1)


def is_py_script(filename):
  """Returns True if a file is a python executable."""
  if not os.access(filename, os.X_OK):
    return False
  else:
    try:
      first_line = open(filename, 'r').next().strip()
      return '#!' in first_line and 'python' in first_line
    except StopIteration:
      return False


def main():
  sub = subprocess.Popen('git rev-parse --show-toplevel'.split(), stdout=subprocess.PIPE)
  sub.wait()
  rootDir = sub.stdout.readlines()[0].strip()

  runTests(rootDir)
  checkLint()


if __name__ == '__main__':
  main()
